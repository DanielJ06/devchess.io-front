[{"F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\index.js":"1","F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\App.js":"2","F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\pages\\Board\\index.js":"3","F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\components\\Records\\index.js":"4","F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\pages\\Board\\styles.js":"5","F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\styles\\global.js":"6","F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\components\\Records\\styles.js":"7","F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\pages\\Home\\index.js":"8","F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\services\\socket.js":"9"},{"size":197,"mtime":1608986601285,"results":"10","hashOfConfig":"11"},{"size":445,"mtime":1609541700965,"results":"12","hashOfConfig":"11"},{"size":3776,"mtime":1608995713495,"results":"13","hashOfConfig":"11"},{"size":303,"mtime":1609000559511,"results":"14","hashOfConfig":"11"},{"size":177,"mtime":1609001945183,"results":"15","hashOfConfig":"11"},{"size":765,"mtime":1608995507521,"results":"16","hashOfConfig":"11"},{"size":615,"mtime":1609011358500,"results":"17","hashOfConfig":"11"},{"size":1767,"mtime":1609589698132,"results":"18","hashOfConfig":"11"},{"size":206,"mtime":1609543500389,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"zugzew",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\index.js",[],["40","41"],"F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\App.js",[],"F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\pages\\Board\\index.js",["42","43","44"],"import React, { useEffect, useState } from 'react';\r\nimport Chessboard from 'chessboardjsx';\r\nimport Chess from \"chess.js\";\r\nimport Records from '../../components/Records';\r\n\r\nimport { Container } from './styles';\r\n\r\nfunction Board() {\r\n  const [game, setGame] = useState(null);\r\n  const [history, setHistory] = useState([]);\r\n  const [pieceSquare, setPieceSquare] = useState(\"\");\r\n  const [squareStyles, setSquareStyles] = useState({});\r\n  const [isDraggable, setDraggable] = useState(true);\r\n  const [turn, setTurn] = useState('');\r\n  const [fen, setFen] = useState('start')\r\n\r\n  useEffect(() => {\r\n    function startGame() {\r\n      const chessgame = new Chess();\r\n      setGame(chessgame);\r\n    }\r\n    startGame();\r\n  }, []);\r\n\r\n  const onDrop = ({ sourceSquare, targetSquare }) => {\r\n    let move = game.move({\r\n      from: sourceSquare,\r\n      to: targetSquare,\r\n      promotion: 'q'\r\n    });\r\n\r\n    const checkmate = game.in_checkmate();\r\n    const turn = game.turn();\r\n\r\n    setTurn(turn);\r\n\r\n    // if (turn === 'b') {\r\n    //   setDraggable(false);\r\n    // } else {\r\n    //   setDraggable(true);\r\n    // }\r\n\r\n    if (checkmate) {\r\n      if (turn === 'b') {\r\n        alert('White wins')\r\n      } else {\r\n        alert('Black wins')\r\n      }\r\n    }\r\n\r\n    if (move === null) return;\r\n    setFen(game.fen);\r\n    setHistory(game.history({verbose: true}));\r\n    setSquareStyles(squareStyling(history, pieceSquare))\r\n  }\r\n\r\n  const squareStyling = (pieceSquare, history) => {\r\n    const sourceSquare = history.length && history[history.length - 1].from;\r\n    const targetSquare = history.length && history[history.length - 1].to;\r\n  \r\n    return {\r\n      [pieceSquare]: { backgroundColor: \"rgba(255, 255, 0, 0.4)\" },\r\n      ...(history.length && {\r\n        [sourceSquare]: {\r\n          backgroundColor: \"rgba(255, 255, 0, 0.4)\"\r\n        }\r\n      }),\r\n      ...(history.length && {\r\n        [targetSquare]: {\r\n          backgroundColor: \"rgba(255, 255, 0, 0.8)\"\r\n        }\r\n      })\r\n    };\r\n  };\r\n\r\n  const highlightSquare = (sourceSquare, squaresToHighlight) => {\r\n    const highlightStyles = [sourceSquare, ...squaresToHighlight].reduce(\r\n      (a, c) => {\r\n        return {\r\n          ...a,\r\n          ...{\r\n            [c]: {\r\n              background:\r\n                \"radial-gradient(circle, #fffc00 36%, transparent 40%)\",\r\n              borderRadius: \"50%\"\r\n            }\r\n          },\r\n          ...squareStyling(\r\n            history,\r\n            pieceSquare\r\n          )\r\n        };\r\n      },\r\n      {}\r\n    );\r\n\r\n    setSquareStyles({...squareStyles, ...highlightStyles})\r\n  }\r\n\r\n  const removeHighlight = () => {\r\n    setSquareStyles(squareStyling(pieceSquare, history ))\r\n  }\r\n\r\n  const onMouseOutSquare = square => removeHighlight(square);\r\n\r\n  const onMouseOverSquare = (square) => {\r\n    let possibleMoves = game.moves({\r\n      square: square,\r\n      verbose: true\r\n    });\r\n\r\n    if (possibleMoves.length === 0) return;\r\n\r\n    let squaresToHighlight = [];\r\n    for (var i = 0; i < possibleMoves.length; i++) {\r\n      squaresToHighlight.push(possibleMoves[i].to);\r\n    }\r\n\r\n    highlightSquare(square, squaresToHighlight)\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Chessboard \r\n        id=\"chess\"\r\n        width={500}\r\n        position={fen}\r\n        draggable={isDraggable}\r\n        onDrop={onDrop}\r\n        onMouseOverSquare={onMouseOverSquare}\r\n        onMouseOutSquare={onMouseOutSquare}\r\n        squareStyles={squareStyles}\r\n        boardStyle={{\r\n          borderRadius: '10px'\r\n        }}\r\n        lightSquareStyle={{\r\n          backgroundColor: '#EEEED2'\r\n        }}\r\n        darkSquareStyle={{\r\n          backgroundColor: '#769656'\r\n        }}\r\n      />\r\n\r\n      <Records records={history} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Board;","F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\components\\Records\\index.js",[],"F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\pages\\Board\\styles.js",[],"F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\styles\\global.js",[],"F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\components\\Records\\styles.js",[],"F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\pages\\Home\\index.js",[],"F:\\Programacao\\Dev\\Personal projects\\chess\\front\\src\\services\\socket.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":11,"column":23,"nodeType":"51","messageId":"52","endLine":11,"endColumn":37},{"ruleId":"49","severity":1,"message":"53","line":13,"column":23,"nodeType":"51","messageId":"52","endLine":13,"endColumn":35},{"ruleId":"49","severity":1,"message":"54","line":14,"column":10,"nodeType":"51","messageId":"52","endLine":14,"endColumn":14},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'setPieceSquare' is assigned a value but never used.","Identifier","unusedVar","'setDraggable' is assigned a value but never used.","'turn' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]